% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeDistribution.R
\name{makeDistribution}
\alias{makeDistribution}
\title{Make Distribution}
\usage{
makeDistribution(sample, minimum = min(sample)-sd(sample), maximum = max(sample)+sd(sample), smooth=F, ...)
}
\arguments{
\item{sample}{data array to make the distribution.}

\item{minimum, maximum}{values to be considered as minimum and maximum to make the distribution.}

\item{smooth}{boolean, if its true then it would smooth data before make the distribution.}

\item{...}{alrguments to pass on method \code{smooth.spline}.}
}
\value{
Returns a list with four functions.\cr
\code{pfun(q)} Cumulative distribution function.\cr
\code{qfun(p)} Quantile function of the distibution.\cr
\code{rfun(n)} Generates random deviates.\cr
\code{dfun(x)} Gives the density. It doesn't work by now, but will be improved in next updates.
}
\description{
Make a continuous distribution from a empiric sample.
}
\details{
The default minimum is min(sample)-sd(sample), this is made to improve the results, but it can be changed by 
the real minimum declarating it in the inputs. Same for maximum.
}
\examples{
data1=rnorm(10000)
data2=runif(10000) #take 2 different samples  
dist1=makeDistribution(data1,minimum=min(data1),maximum=max(data1))
dist2=makeDistribution(data2,minimum=min(data2),maximum=max(data2)) #make distributions of them
quantiles=seq(0,1,by=0.1) #vector of deciles
probabilities= seq(0,1,by=0.001) #vector of probabilities

#Compare the empiric distributions with base version. 
require(ggplot2)
a=qplot(quantiles,pnorm(quantiles),main="Real pnorm")
b=qplot(probabilities,qnorm(probabilities),main="Real qnorm")
c=qplot(probabilities,dnorm(probabilities),main="Real dnorm")
d=qplot(quantiles,dist1$pfun(quantiles),main="makeDitribution-pnorm")
f=qplot(probabilities,dist1$qfun(probabilities),main="makeDitribution-qnorm")
g=qplot(probabilities,dist1$dfun(probabilities),main="makeDitribution-dnorm")  
h=qplot(quantiles,punif(quantiles),main="Real punif")
i=qplot(probabilities,qunif(probabilities),main="Real qunif")
j=qplot(probabilities,dunif(probabilities),main="Real dunif")
k=qplot(quantiles,dist2$pfun(quantiles),main="makeDitribution-punif")
l=qplot(probabilities,dist2$qfun(probabilities),main="makeDitribution-qunif")
m=qplot(probabilities,dist2$dfun(probabilities),main="makeDitribution-dunif")  
multiplot(a,b,c,d,f,g,h,i,j,k,l,m,cols=4)
}
\author{
Daniel Fischer
}
